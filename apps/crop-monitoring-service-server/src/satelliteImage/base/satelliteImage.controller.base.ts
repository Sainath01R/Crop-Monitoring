/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SatelliteImageService } from "../satelliteImage.service";
import { SatelliteImageCreateInput } from "./SatelliteImageCreateInput";
import { SatelliteImage } from "./SatelliteImage";
import { SatelliteImageFindManyArgs } from "./SatelliteImageFindManyArgs";
import { SatelliteImageWhereUniqueInput } from "./SatelliteImageWhereUniqueInput";
import { SatelliteImageUpdateInput } from "./SatelliteImageUpdateInput";

export class SatelliteImageControllerBase {
  constructor(protected readonly service: SatelliteImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SatelliteImage })
  async createSatelliteImage(
    @common.Body() data: SatelliteImageCreateInput
  ): Promise<SatelliteImage> {
    return await this.service.createSatelliteImage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SatelliteImage] })
  @ApiNestedQuery(SatelliteImageFindManyArgs)
  async satelliteImages(
    @common.Req() request: Request
  ): Promise<SatelliteImage[]> {
    const args = plainToClass(SatelliteImageFindManyArgs, request.query);
    return this.service.satelliteImages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SatelliteImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async satelliteImage(
    @common.Param() params: SatelliteImageWhereUniqueInput
  ): Promise<SatelliteImage | null> {
    const result = await this.service.satelliteImage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SatelliteImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSatelliteImage(
    @common.Param() params: SatelliteImageWhereUniqueInput,
    @common.Body() data: SatelliteImageUpdateInput
  ): Promise<SatelliteImage | null> {
    try {
      return await this.service.updateSatelliteImage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SatelliteImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSatelliteImage(
    @common.Param() params: SatelliteImageWhereUniqueInput
  ): Promise<SatelliteImage | null> {
    try {
      return await this.service.deleteSatelliteImage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
