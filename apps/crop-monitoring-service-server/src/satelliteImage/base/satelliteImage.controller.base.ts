/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SatelliteImageService } from "../satelliteImage.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SatelliteImageCreateInput } from "./SatelliteImageCreateInput";
import { SatelliteImage } from "./SatelliteImage";
import { SatelliteImageFindManyArgs } from "./SatelliteImageFindManyArgs";
import { SatelliteImageWhereUniqueInput } from "./SatelliteImageWhereUniqueInput";
import { SatelliteImageUpdateInput } from "./SatelliteImageUpdateInput";
import { AnalysisReportFindManyArgs } from "../../analysisReport/base/AnalysisReportFindManyArgs";
import { AnalysisReport } from "../../analysisReport/base/AnalysisReport";
import { AnalysisReportWhereUniqueInput } from "../../analysisReport/base/AnalysisReportWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SatelliteImageControllerBase {
  constructor(
    protected readonly service: SatelliteImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SatelliteImage })
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSatelliteImage(
    @common.Body() data: SatelliteImageCreateInput
  ): Promise<SatelliteImage> {
    return await this.service.createSatelliteImage({
      data: {
        ...data,

        fieldModel: data.fieldModel
          ? {
              connect: data.fieldModel,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dateCaptured: true,

        fieldModel: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SatelliteImage] })
  @ApiNestedQuery(SatelliteImageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async satelliteImages(
    @common.Req() request: Request
  ): Promise<SatelliteImage[]> {
    const args = plainToClass(SatelliteImageFindManyArgs, request.query);
    return this.service.satelliteImages({
      ...args,
      select: {
        createdAt: true,
        dateCaptured: true,

        fieldModel: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SatelliteImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async satelliteImage(
    @common.Param() params: SatelliteImageWhereUniqueInput
  ): Promise<SatelliteImage | null> {
    const result = await this.service.satelliteImage({
      where: params,
      select: {
        createdAt: true,
        dateCaptured: true,

        fieldModel: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SatelliteImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSatelliteImage(
    @common.Param() params: SatelliteImageWhereUniqueInput,
    @common.Body() data: SatelliteImageUpdateInput
  ): Promise<SatelliteImage | null> {
    try {
      return await this.service.updateSatelliteImage({
        where: params,
        data: {
          ...data,

          fieldModel: data.fieldModel
            ? {
                connect: data.fieldModel,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dateCaptured: true,

          fieldModel: {
            select: {
              id: true,
            },
          },

          id: true,
          imageUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SatelliteImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSatelliteImage(
    @common.Param() params: SatelliteImageWhereUniqueInput
  ): Promise<SatelliteImage | null> {
    try {
      return await this.service.deleteSatelliteImage({
        where: params,
        select: {
          createdAt: true,
          dateCaptured: true,

          fieldModel: {
            select: {
              id: true,
            },
          },

          id: true,
          imageUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/analysisReports")
  @ApiNestedQuery(AnalysisReportFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AnalysisReport",
    action: "read",
    possession: "any",
  })
  async findAnalysisReports(
    @common.Req() request: Request,
    @common.Param() params: SatelliteImageWhereUniqueInput
  ): Promise<AnalysisReport[]> {
    const query = plainToClass(AnalysisReportFindManyArgs, request.query);
    const results = await this.service.findAnalysisReports(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,
        id: true,
        reportDate: true,

        satelliteImage: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analysisReports")
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "update",
    possession: "any",
  })
  async connectAnalysisReports(
    @common.Param() params: SatelliteImageWhereUniqueInput,
    @common.Body() body: AnalysisReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisReports: {
        connect: body,
      },
    };
    await this.service.updateSatelliteImage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analysisReports")
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "update",
    possession: "any",
  })
  async updateAnalysisReports(
    @common.Param() params: SatelliteImageWhereUniqueInput,
    @common.Body() body: AnalysisReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisReports: {
        set: body,
      },
    };
    await this.service.updateSatelliteImage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analysisReports")
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "update",
    possession: "any",
  })
  async disconnectAnalysisReports(
    @common.Param() params: SatelliteImageWhereUniqueInput,
    @common.Body() body: AnalysisReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisReports: {
        disconnect: body,
      },
    };
    await this.service.updateSatelliteImage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
