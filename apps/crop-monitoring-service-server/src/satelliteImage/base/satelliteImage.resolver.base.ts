/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SatelliteImage } from "./SatelliteImage";
import { SatelliteImageCountArgs } from "./SatelliteImageCountArgs";
import { SatelliteImageFindManyArgs } from "./SatelliteImageFindManyArgs";
import { SatelliteImageFindUniqueArgs } from "./SatelliteImageFindUniqueArgs";
import { CreateSatelliteImageArgs } from "./CreateSatelliteImageArgs";
import { UpdateSatelliteImageArgs } from "./UpdateSatelliteImageArgs";
import { DeleteSatelliteImageArgs } from "./DeleteSatelliteImageArgs";
import { AnalysisReportFindManyArgs } from "../../analysisReport/base/AnalysisReportFindManyArgs";
import { AnalysisReport } from "../../analysisReport/base/AnalysisReport";
import { FieldModel } from "../../fieldModel/base/FieldModel";
import { SatelliteImageService } from "../satelliteImage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SatelliteImage)
export class SatelliteImageResolverBase {
  constructor(
    protected readonly service: SatelliteImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "read",
    possession: "any",
  })
  async _satelliteImagesMeta(
    @graphql.Args() args: SatelliteImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SatelliteImage])
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "read",
    possession: "any",
  })
  async satelliteImages(
    @graphql.Args() args: SatelliteImageFindManyArgs
  ): Promise<SatelliteImage[]> {
    return this.service.satelliteImages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SatelliteImage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "read",
    possession: "own",
  })
  async satelliteImage(
    @graphql.Args() args: SatelliteImageFindUniqueArgs
  ): Promise<SatelliteImage | null> {
    const result = await this.service.satelliteImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SatelliteImage)
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "create",
    possession: "any",
  })
  async createSatelliteImage(
    @graphql.Args() args: CreateSatelliteImageArgs
  ): Promise<SatelliteImage> {
    return await this.service.createSatelliteImage({
      ...args,
      data: {
        ...args.data,

        fieldModel: args.data.fieldModel
          ? {
              connect: args.data.fieldModel,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SatelliteImage)
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "update",
    possession: "any",
  })
  async updateSatelliteImage(
    @graphql.Args() args: UpdateSatelliteImageArgs
  ): Promise<SatelliteImage | null> {
    try {
      return await this.service.updateSatelliteImage({
        ...args,
        data: {
          ...args.data,

          fieldModel: args.data.fieldModel
            ? {
                connect: args.data.fieldModel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SatelliteImage)
  @nestAccessControl.UseRoles({
    resource: "SatelliteImage",
    action: "delete",
    possession: "any",
  })
  async deleteSatelliteImage(
    @graphql.Args() args: DeleteSatelliteImageArgs
  ): Promise<SatelliteImage | null> {
    try {
      return await this.service.deleteSatelliteImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AnalysisReport], { name: "analysisReports" })
  @nestAccessControl.UseRoles({
    resource: "AnalysisReport",
    action: "read",
    possession: "any",
  })
  async findAnalysisReports(
    @graphql.Parent() parent: SatelliteImage,
    @graphql.Args() args: AnalysisReportFindManyArgs
  ): Promise<AnalysisReport[]> {
    const results = await this.service.findAnalysisReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FieldModel, {
    nullable: true,
    name: "fieldModel",
  })
  @nestAccessControl.UseRoles({
    resource: "FieldModel",
    action: "read",
    possession: "any",
  })
  async getFieldModel(
    @graphql.Parent() parent: SatelliteImage
  ): Promise<FieldModel | null> {
    const result = await this.service.getFieldModel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
