/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SatelliteImage as PrismaSatelliteImage } from "@prisma/client";

export class SatelliteImageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SatelliteImageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.satelliteImage.count(args);
  }

  async satelliteImages(
    args: Prisma.SatelliteImageFindManyArgs
  ): Promise<PrismaSatelliteImage[]> {
    return this.prisma.satelliteImage.findMany(args);
  }
  async satelliteImage(
    args: Prisma.SatelliteImageFindUniqueArgs
  ): Promise<PrismaSatelliteImage | null> {
    return this.prisma.satelliteImage.findUnique(args);
  }
  async createSatelliteImage(
    args: Prisma.SatelliteImageCreateArgs
  ): Promise<PrismaSatelliteImage> {
    return this.prisma.satelliteImage.create(args);
  }
  async updateSatelliteImage(
    args: Prisma.SatelliteImageUpdateArgs
  ): Promise<PrismaSatelliteImage> {
    return this.prisma.satelliteImage.update(args);
  }
  async deleteSatelliteImage(
    args: Prisma.SatelliteImageDeleteArgs
  ): Promise<PrismaSatelliteImage> {
    return this.prisma.satelliteImage.delete(args);
  }
}
